
# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.SpotifyData (id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined the avg popularity, danceability, and energy by artist and track. 
SELECT artist_name, track_name, avg(popularity), avg(danceability), avg(energy) FROM BIT_DB.SpotifyData
  GROUP BY artist_name, track_name;

#Then I determined who the Top 10 artists are by popularity
SELECT track_name, artist_name, popularity FROM BIT_DB.SpotifyData
  ORDER BY popularity desc
  LIMIT 10;

#Then I determined the most popular song with the highest danceability rating.
SELECT artist_name AS Artist, track_name AS Song, MAX(popularity) AS Popularity, MAX(danceability) AS Danceability FROM BIT_DB.SpotifyData

#Then I determined which song was the loudest for my next party and what order all the songs fit into going from loudest to softest.
SELECT artist_name, track_name, MAX(loudness) FROM BIT_DB.SpotifyData;

SELECT artist_name, track_name, loudness FROM BIT_DB.SpotifyData
  ORDER BY loudness desc;

#Lastly I wanted to determine the artists popularity. For this I used a CTE.
WITH average_popularity_CTE AS (
  SELECT s.artist_name, AVG(s.popularity) AS average_popularity FROM SpotifyData s
  GROUP BY s.artist_name)
  
SELECT artist_name, average_popularity FROM average_popularity_CTE
  ORDER BY average_popularity desc;
  
  
